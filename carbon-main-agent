import json
import boto3
from datetime import datetime
import uuid
import time
import asyncio
import concurrent.futures

# Initialize AWS clients outside the handler for reuse
bedrock = boto3.client('bedrock-runtime')
dynamodb = boto3.resource('dynamodb')
lambda_client = boto3.client('lambda')

TABLE_NAME = 'carbon-assistant-data'

def store_conversation(conversation_id, user_input, response):
    """Store conversation in DynamoDB with proper formatting"""
    try:
        table = dynamodb.Table(TABLE_NAME)
        timestamp = str(int(datetime.now().timestamp() * 1000))
        
        item = {
            'conversationId': conversation_id,
            'timestamp': timestamp,
            'userInput': user_input,
            'response': response,
            'type': 'conversation'
        }
        
        # Use PutItem with minimal attributes to speed up write
        table.put_item(Item=item)
    except Exception as e:
        print(f"DynamoDB error: {str(e)}")
        # Don't raise the error, just log it and continue
        return None

def invoke_bedrock_with_retry(prompt, max_retries=2, initial_delay=0.5):
    """Optimized Bedrock invocation with faster retry"""
    last_exception = None
    
    for attempt in range(max_retries):
        try:
            request_body = {
                "anthropic_version": "bedrock-2023-05-31",
                "max_tokens": 500,  # Reduced for faster response
                "messages": [
                    {
                        "role": "user",
                        "content": [{"type": "text", "text": prompt}]
                    }
                ]
            }
            
            response = bedrock.invoke_model(
                modelId='anthropic.claude-3-5-sonnet-20240620-v1:0',
                contentType='application/json',
                accept='application/json',
                body=json.dumps(request_body)
            )
            
            response_body = json.loads(response['body'].read().decode())
            return response_body['content'][0]['text']
            
        except Exception as e:
            last_exception = e
            if attempt < max_retries - 1:
                time.sleep(initial_delay)
                initial_delay *= 2
                continue
            
    # If we get here, all retries failed
    return f"I apologize, but I'm experiencing some technical difficulties. Please try again in a moment. Error: {str(last_exception)}"

def invoke_calculation_agent(query):
    """Invoke calculation Lambda with timeout"""
    try:
        response = lambda_client.invoke(
            FunctionName='carbon-calculation-agent',
            InvocationType='RequestResponse',
            Payload=json.dumps({'query': query}),
        )
        return json.loads(response['Payload'].read())
    except Exception as e:
        print(f"Calculation error: {str(e)}")
        return None

def lambda_handler(event, context):
    try:
        start_time = time.time()
        
        # Extract input from event
        body = json.loads(event.get('body', '{}'))
        user_input = body.get('input', '')
        conversation_id = body.get('conversationId', str(uuid.uuid4()))
        
        # Set timeout threshold
        TIMEOUT_THRESHOLD = 25  # seconds
        
        # Quick validation
        if not user_input:
            return {
                'statusCode': 400,
                'headers': {'Content-Type': 'application/json'},
                'body': json.dumps({'error': 'Input is required'})
            }
        
        # Process query with timeout awareness
        if "carbon" in user_input.lower() or "emission" in user_input.lower():
            # Calculate remaining time
            elapsed_time = time.time() - start_time
            if elapsed_time > TIMEOUT_THRESHOLD:
                raise TimeoutError("Processing time exceeded")
                
            calc_results = invoke_calculation_agent(user_input)
            
            # If calculation succeeds
            if calc_results:
                response = invoke_bedrock_with_retry(
                    f"Explain these carbon emission calculation results briefly and clearly: {calc_results}"
                )
            else:
                response = invoke_bedrock_with_retry(
                    f"I couldn't calculate exact emissions, but here's guidance about carbon emissions for {user_input}. Keep it brief."
                )
        else:
            response = invoke_bedrock_with_retry(user_input)
        
        # Async store conversation if time permits
        elapsed_time = time.time() - start_time
        if elapsed_time < TIMEOUT_THRESHOLD:
            store_conversation(conversation_id, user_input, response)
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'response': response,
                'conversationId': conversation_id
            })
        }
        
    except TimeoutError:
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({
                'response': "I apologize, but the request is taking longer than expected. Please try again with a simpler query.",
                'conversationId': conversation_id
            })
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'error': str(e)})
        }
